
CI/CD Project with Terraform and Ansible for Jenkins Setup 🚀
This project uses Terraform to set up the AWS infrastructure and Ansible to configure a Jenkins Master and Jenkins Worker (Spot Instance). Let's get started! 😄

Project Overview 🌐
This project automates the creation of a Jenkins CI/CD pipeline environment on AWS. It includes:

- Terraform: For provisioning AWS infrastructure (VPC, EC2 instances, NAT Gateway, Security Groups, etc.).
- Ansible: For configuring Jenkins Master and Jenkins Worker (Spot Instance).
- Jenkins: For continuous integration and deployment (with necessary plugins).

Components 🛠️:
1. Jenkins Master:
- Plugins: Docker, Docker Pipeline, DockerHub, Node.js 🐳.
- Configuration: Install Jenkins, Java JDK 17, and Nginx for reverse proxy 🔧.

2. Jenkins Worker:
- Software: Docker (for running Jenkins pipelines), Java JDK 17, Node.js, NPM, Nohup (for running Jenkins Worker as a background process) 🖥️.

Pre-requisites 📝
Terraform: Make sure you have Terraform installed on your local machine. You can download it from Terraform Downloads.

Ansible: Ensure Ansible is installed. You can install it using:

> pip install ansible

AWS CLI: You need AWS CLI configured with proper IAM permissions. You can configure it by running:

> aws configure

SSH Key: Ensure you have an SSH key pair for connecting to your EC2 instances. You should have the private key (~/.ssh/id_rsa) available on your local machine 🔑.
S3 Bucket: Terraform will use an S3 bucket for remote state storage. Create a bucket in AWS if not already created 🗄️.

Terraform Setup 🏗️
1. Configure Variables 🛠️
Before starting, configure the terraform.tfvars file with the following variables:

- AMI: Specify the Ubuntu AMI (it should be an Ubuntu AMI for the EC2 instances).
- Region: Choose the AWS region where you want to create resources.
- S3 Bucket: Specify an existing S3 bucket name for storing Terraform state.

---
ami = "ami-xxxxxxxxxxxxxxxxx"  # Specify the Ubuntu AMI
region = "us-east-1"           # Choose your region
s3_bucket = "your-terraform-bucket"
---

2. Initialize Terraform 🔄
Run the following command to initialize the Terraform project:

> terraform init

3. Plan the Infrastructure 🧑‍💻
Terraform will show you the changes that will be made in your AWS account. To preview them, run:

> terraform plan

4. Apply Terraform Configuration 🚀
To provision the resources, run:

> terraform apply

This will create the following AWS resources:
- VPC
- Public and Private Subnets
- Internet Gateway, NAT Gateway, Route Tables
- Security Groups allowing SSH and HTTP access
- EC2 instances (Jenkins Master and Jenkins Worker as a Spot Instance)

5. Generate inventory.ini 📜
After Terraform finishes, it will generate an inventory.ini file in the ../ansible/ directory. This file will contain the IP addresses for the Jenkins Master and Jenkins Worker,
along with the SSH credentials needed for Ansible.

Ansible Setup 🛠️
1. Configure Jenkins Master 🖥️
Run the following Ansible playbook to set up the Jenkins Master:

> ansible-playbook -i inventory.ini site.yml --limit jenkins_master

This playbook will:
- Update and upgrade the Ubuntu OS
- Install Java JDK 17
- Install Jenkins
- Configure Nginx as a reverse proxy for Jenkins

2. Jenkins Web Interface 🌐
After the playbook finishes, open your browser and navigate to:

> http://<jenkins_master_ip>:80

The admin password can be found in the Jenkins container logs or file /var/lib/jenkins/secrets/initialAdminPassword.
Complete the setup by installing the suggested plugins and creating an admin user.

3. Install Jenkins Plugins 🔌
Install the following plugins:

- Docker
- Docker Pipeline
- Node.js
- DockerHub
- To do this, go to Manage Jenkins > Manage Plugins and search for the plugins to install.

4. Jenkins Agent Configuration ⚙️
Create an agent on the Jenkins Master with the following details:

The agent jar file will be saved in /home/user/dir.
Configure the agent in the /roles/jenkins_worker/vars/main.yml file:
Set the number of executors for the master to 0 (since all jobs will run on the worker).
Set the worker agent name and secret token.

5. DockerHub Credentials 🐳
Configure DockerHub credentials to enable pushing Docker images from Jenkins.

6. Configure Jenkins Worker (Spot Instance) 🧑‍🏭
Run the following Ansible playbook to configure the Jenkins Worker:

> ansible-playbook -i inventory.ini --limit jenkins_worker

This playbook will:
- Install Docker (for Jenkins pipeline execution)
- Install Java JDK 17
- Install Node.js and NPM
- Install Nohup for running Jenkins Worker as a background process
- Connect the Jenkins Worker to the Jenkins Master
- Jenkins Pipeline 🔄

1. Create a Jenkins Pipeline 🛠️
Create a new Jenkins pipeline job.
Use the following Git repository URL in the pipeline definition:

https://github.com/sashaloven/CI_CD_Project
Branch: main

2. Test the Pipeline 🧪
Once the pipeline is set up, run it to test the full process from the Jenkins Master to the Jenkins Worker (Spot Instance).

Troubleshooting 🧐
- Issue: Nginx is not proxying to Jenkins properly.
Ensure that the Nginx configuration file is correctly pointing to the Jenkins Master’s IP address.

- Issue: Jenkins Worker is not connecting to the Jenkins Master.
Check the worker's agent configuration and verify that the secret token is correctly set.

- Issue: Terraform shows errors during apply.
Ensure that all required variables are correctly set in the terraform.tfvars file.
Check AWS IAM permissions to ensure Terraform can provision resources.

Clean Up 🧹
To destroy the infrastructure and remove all AWS resources, run:

> terraform destroy
